import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Room {
    private String category;
    private int roomNumber;
    private boolean isAvailable;
    private double pricePerNight;

    public Room(String category, int roomNumber, boolean isAvailable, double pricePerNight) {
        this.category = category;
        this.roomNumber = roomNumber;
        this.isAvailable = isAvailable;
        this.pricePerNight = pricePerNight;
    }

    public String getCategory() {
        return category;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    public double getPricePerNight() {
        return pricePerNight;
    }

    @Override
    public String toString() {
        return "Room " + roomNumber + " (" + category + ") - " + (isAvailable ? "Available" : "Not Available") + " - $" + pricePerNight;
    }
}

class Reservation {
    private Room room;
    private String guestName;
    private int nights;

    public Reservation(Room room, String guestName, int nights) {
        this.room = room;
        this.guestName = guestName;
        this.nights = nights;
    }

    public Room getRoom() {
        return room;
    }

    public String getGuestName() {
        return guestName;
    }

    public int getNights() {
        return nights;
    }

    public double calculateTotalPrice() {
        return room.getPricePerNight() * nights;
    }

    @Override
    public String toString() {
        return "Reservation: " + guestName + " - Room " + room.getRoomNumber() + " (" + room.getCategory() + ") - " + nights + " nights - Total: $" + calculateTotalPrice();
    }
}

public class HotelReservationSystem 
{
    private List<Room> rooms;
    private List<Reservation> reservations;

    public HotelReservationSystem() {
        rooms = new ArrayList<>();
        reservations = new ArrayList<>();
        initializeRooms();
    }

    private void initializeRooms() {
        rooms.add(new Room("Single", 101, true, 100.0));
        rooms.add(new Room("Double", 102, true, 150.0));
        rooms.add(new Room("Suite", 201, true, 250.0));
        rooms.add(new Room("Suite", 202, true, 250.0));
        // Additional room categories can be added here
    }

    public void searchAvailableRooms(String category) {
        System.out.println("\nAvailable rooms in category " + category + ":");
        for (Room room : rooms) {
            if (room.getCategory().equalsIgnoreCase(category) && room.isAvailable()) {
                System.out.println(room);
            }
        }
    }

    public void makeReservation(String guestName, int roomNumber, int nights) {
        Room selectedRoom = null;
        for (Room room : rooms) {
            if (room.getRoomNumber() == roomNumber && room.isAvailable()) {
                selectedRoom = room;
                break;
            }
        }

        if (selectedRoom != null) {
            Reservation reservation = new Reservation(selectedRoom, guestName, nights);
            reservations.add(reservation);
            selectedRoom.setAvailable(false);
            System.out.println("Reservation made successfully.");
            System.out.println(reservation);
            processPayment(reservation.calculateTotalPrice());
        } else {
            System.out.println("Sorry, room not available or does not exist.");
        }
    }

    private void processPayment(double amount) {
        // Mock payment processing
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter payment method (CreditCard/DebitCard): ");
        String paymentMethod = scanner.nextLine();

        // Validate payment method
        if (paymentMethod.equalsIgnoreCase("CreditCard") || paymentMethod.equalsIgnoreCase("DebitCard")) {
            System.out.println("Processing payment of $" + amount + " using " + paymentMethod + "...");
            // Simulate payment processing delay
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            System.out.println("Payment successful.");
        } else {
            System.out.println("Invalid payment method. Payment failed.");
        }
    }

    public void viewBookingDetails() {
        System.out.println("\nBooking details:");
        for (Reservation reservation : reservations) {
            System.out.println(reservation);
        }
    }

    public static void main(String[] args) {
        HotelReservationSystem system = new HotelReservationSystem();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n--- Hotel Reservation System ---");
            System.out.println("1. Search Available Rooms");
            System.out.println("2. Make a Reservation");
            System.out.println("3. View Booking Details");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter room category to search (Single, Double, Suite): ");
                    String category = scanner.nextLine();
                    system.searchAvailableRooms(category);
                    break;
                case 2:
                    System.out.print("Enter guest name: ");
                    String guestName = scanner.nextLine();
                    System.out.print("Enter room number to reserve: ");
                    int roomNumber = scanner.nextInt();
                    System.out.print("Enter number of nights: ");
                    int nights = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    system.makeReservation(guestName, roomNumber, nights);
                    break;
                case 3:
                    system.viewBookingDetails();
                    break;
                case 4:
                    System.out.println("Exiting system...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
